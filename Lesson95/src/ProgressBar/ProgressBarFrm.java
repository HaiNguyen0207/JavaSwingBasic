package ProgressBar;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author unilap
 */
public class ProgressBarFrm extends javax.swing.JFrame implements ActionListener,
        PropertyChangeListener {

    private String selectionFilePath;

    public ProgressBarFrm() {
        initComponents();
        setLocationRelativeTo(null);
        btnChooseFile.addActionListener(this);
        btnCopy.addActionListener(this);
        selectionFilePath = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFileInfor = new javax.swing.JTextArea();
        btnChooseFile = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        progressCopy = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HaiNguyen");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sử Dụng Progress Bar");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        txtFileInfor.setEditable(false);
        txtFileInfor.setColumns(20);
        txtFileInfor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFileInfor.setRows(5);
        jScrollPane1.setViewportView(txtFileInfor);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        btnChooseFile.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnChooseFile.setText("Chọn File");

        btnCopy.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCopy.setText("Nhân Bản");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Tiến Trình :");

        progressCopy.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        progressCopy.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 31, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChooseFile)
                    .addComponent(btnCopy))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addComponent(btnChooseFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCopy)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgressBarFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgressBarFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgressBarFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgressBarFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProgressBarFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnCopy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressCopy;
    private javax.swing.JTextArea txtFileInfor;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource().equals(btnChooseFile)) {
            String pathFoder = "C:\\Users\\unilap\\Downloads";
            File file = new File(pathFoder);
            JFileChooser fileChooser = new JFileChooser(file);
            fileChooser.setFileFilter(new MediaFilter());
            var action = fileChooser.showOpenDialog(this);
            if (action == fileChooser.APPROVE_OPTION) {
                selectionFilePath = fileChooser.getSelectedFile().getAbsolutePath();
                File fileSelection = new File(selectionFilePath);
                NumberFormat numberFormat = new DecimalFormat("##.##");

                String txt = "";
                txt = "Đường dẫn : " + selectionFilePath + "\n"
                        + "Tên file : " + selectionFilePath.
                                substring(selectionFilePath.lastIndexOf("\\") + 1) + "\n"
                        + "Kích thước : " + numberFormat.
                                format(selectionFilePath.length() * 1.0 / 1024 * 1024)
                        + "MB\n"
                        + "Loại file : " + FileFilterUtils.getExtension(fileSelection);
                txtFileInfor.setText(txt);
            }
        } else if (e.getSource().equals(btnCopy)) {
            if (selectionFilePath != null) {
                btnCopy.setEnabled(false);
                Task task = new Task();
                progressCopy.setValue(0);
                task.addPropertyChangeListener(this);
                task.execute();
                
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng chọn file để nhân bản");
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (int) evt.getNewValue();
            progressCopy.setValue(progress);
        }
    }

    class Task extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            int progress = 0;
            long currentSize = 0;
            File file = new File(selectionFilePath);
            var newFile = selectionFilePath.substring(0,
                    selectionFilePath.lastIndexOf("."));
            newFile += "_new" + FileFilterUtils.getExtension(file);
            try ( FileInputStream fis = new FileInputStream(file); 
                    FileOutputStream fos = new FileOutputStream(newFile)) {
                byte[] buffer = new byte[8];
                int data = -1;
                while ((data = fis.read(buffer)) > -1) {
                    fos.write(buffer);
                    currentSize += data;
                    progress = (int) (currentSize * 100 / file.length());
                    setProgress(Math.min(100, progress));
                }
            }
            return null;
        }

        @Override
        protected void done() {
            btnCopy.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, "Nhân bản thành công ");
            progressCopy.setValue(0);
        }

    }
}
